# 数据库分表策略

# 打开 sql 日志输出
spring.shardingsphere.props.sql.show=true

spring.shardingsphere.datasource.names=m1
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/test_001?useUnicode=true&characterEncoding=utf8&useSSL=false&tinyInt1isBit=true&serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=Myroot123!

# 指定表的主键生成策略
spring.shardingsphere.sharding.tables.t_goods.key-generator.column=id
# id 生成策略
spring.shardingsphere.sharding.tables.t_goods.key-generator.type=SNOWFLAKE
# 雪花算法的 worker id
spring.shardingsphere.sharding.tables.t_goods.key-generator.props.worker.id=1
# 真实的数据库表
spring.shardingsphere.sharding.tables.t_goods.actual-data-nodes=m1.t_goods_$->{1..3}
spring.shardingsphere.sharding.binding-tables=t_goods

# 选定计算的字段 id
spring.shardingsphere.sharding.tables.t_goods.table-strategy.inline.sharding-column=id
# 根据计算的字段算出对应的表名
spring.shardingsphere.sharding.tables.t_goods.table-strategy.inline.algorithm-expression=t_goods_$->{id%3+1}

# 数据库策略 分片列 精确算法和范围算法
# spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=id
# spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name=
# spring.shardingsphere.sharding.default-database-strategy.standard.range-algorithm-class-name=

# 表策略
# spring.shardingsphere.sharding.default-table-strategy.standard.sharding-column=
# spring.shardingsphere.sharding.default-table-strategy.standard.precise-algorithm-class-name=
# spring.shardingsphere.sharding.default-table-strategy.standard.range-algorithm-class-name=


# 定义广播表
# spring.shardingsphere.sharding.broadcast-tables=t_config,t_dict


